## 前置知识：递归

详见 [计算机是怎么执行递归的？【基础算法精讲 09】](https://www.bilibili.com/video/BV1UD4y1Y769/)。

> 制作不易，欢迎点赞！APP 用户如果无法打开，可以分享到微信。

## 一、思考

- 题目说「由**垂直**、**水平**或**对角**连接的水域为池塘」，那么如何遍历所有相邻的 $0$？
- 在网格图中，是否会重复访问同一个格子？如何处理？
- 网格图的遍历，与二叉树的遍历有何区别？与一般图的遍历有何区别？
- 什么情况下用 DFS，什么情况下用 BFS？

## 二、解惑

我们从一个值为 $0$ 格子出发，尝试移动到它的邻居，即周围八个方向（上、下、左、右、左上、右上、左下、右下）相邻的格子。如果邻居是 $0$，就移动到邻居，然后**按同样的方法**移动到邻居的邻居。由于每次都在做类似的事情，所以可以用**递归**解决。

在网格图中，向下移动后就不能再向上移动了。如果不做任何处理，那么会反复向下向上，无限递归下去。为了避免无限递归，可以用一个 $\textit{vis}$ 数组标记访问过的格子。例如 $\textit{vis}[2][3]=\texttt{true}$ 表示访问过第 $2$ 行第 $3$ 列的格子。对于本题来说，可以直接把 $\textit{land}[2][3]$ 修改成 $1$，表示访问过。

#### 二叉树 vs 网格图 vs 一般图

||重复访问|邻居个数|DFS|BFS|
|---|---|---|---|---|
|二叉树|否|$\le 3$|前中后序|层序|
|网格图|是|$\le 8$|连通块|最短路|
|一般图|是|任意|连通块、判环等|最短路等|

> 注 1：通常情况下，网格图是四方向的，每个格子的邻居个数不超过 $4$。本题是八方向的，每个格子的邻居个数不超过 $8$。
>
> 注 2：BFS 也可以判断连通块，但要手动用**队列**保存待访问节点；而 DFS 是计算机帮你创建了一个**栈**，自动保存递归路径上的节点，不需要手动处理。所以代码上 DFS 通常比 BFS 要简短。

## 三、算法

1. 从网格图的 $0$ 出发，DFS 访问八方向的 $0$，并把这些 $0$ 标记成「访问过」。代码实现时可以直接把 $0$ 修改成 $1$。
2. DFS 过程中，统计每个方向访问到的格子个数，累加个数得到池塘大小 $\textit{cnt}_0$。
3. 每次从一个新的 $0$ 出发（起点），就意味着找到了一个新的池塘，把 DFS 得到的池塘大小加入答案。
4. 把答案排序后返回。

* [sol-Python3]

```py
class Solution:
    def pondSizes(self, land: List[List[int]]) -> List[int]:
        m, n = len(land), len(land[0])

        def dfs(x: int, y: int) -> int:
            land[x][y] = 1  # 标记 (x,y) 被访问，避免重复访问
            cnt0 = 1
            # 访问八方向的 0
            for i in range(x - 1, x + 2):
                for j in range(y - 1, y + 2):
                    if 0 <= i < m and 0 <= j < n and land[i][j] == 0:
                        cnt0 += dfs(i, j)
            return cnt0

        ans = []
        for i, row in enumerate(land):
            for j, x in enumerate(row):
                if x == 0:  # 从没有访问过的 0 出发
                    ans.append(dfs(i, j))
        ans.sort()
        return ans
```

* [sol-Java]

```java
class Solution {
    public int[] pondSizes(int[][] land) {
        int m = land.length, n = land[0].length;
        var ans = new ArrayList<Integer>();
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                if (land[i][j] == 0) // 从没有访问过的 0 出发
                    ans.add(dfs(land, i, j));

        // 简洁写法，但是慢
        // return ans.stream().sorted().mapToInt(i -> i).toArray();

        // 更快的写法
        var size = new int[ans.size()];
        int i = 0;
        for (int x : ans)
            size[i++] = x;
        Arrays.sort(size);
        return size;
    }

    private int dfs(int[][] land, int x, int y) {
        if (x < 0 || x >= land.length || y < 0 || y >= land[x].length || land[x][y] != 0)
            return 0;
        land[x][y] = 1; // 标记 (x,y) 被访问，避免重复访问
        int cnt0 = 1;
        // 访问八方向的 0
        for (int i = x - 1; i <= x + 1; i++)
            for (int j = y - 1; j <= y + 1; j++)
                cnt0 += dfs(land, i, j);
        return cnt0;
    }
}
```

* [sol-C++]

```cpp
class Solution {
    int dfs(vector<vector<int>> &land, int x, int y) {
        if (x < 0 || x >= land.size() || y < 0 || y >= land[x].size() || land[x][y])
            return 0;
        land[x][y] = 1; // 标记 (x,y) 被访问，避免重复访问
        int cnt0 = 1;
        // 访问八方向的 0
        for (int i = x - 1; i <= x + 1; i++)
            for (int j = y - 1; j <= y + 1; j++)
                cnt0 += dfs(land, i, j);
        return cnt0;
    }

public:
    vector<int> pondSizes(vector<vector<int>> &land) {
        int m = land.size(), n = land[0].size();
        vector<int> ans;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                if (land[i][j] == 0) // 从没有访问过的 0 出发
                    ans.push_back(dfs(land, i, j));
        sort(ans.begin(), ans.end());
        return ans;
    }
};
```

* [sol-Go]

```go
func pondSizes(land [][]int) (ans []int) {
    m, n := len(land), len(land[0])
    var dfs func(int, int) int
    dfs = func(x, y int) int {
        if x < 0 || x >= m || y < 0 || y >= n || land[x][y] != 0 {
            return 0
        }
        land[x][y] = 1 // 标记 (x,y) 被访问，避免重复访问
        cnt0 := 1
        for i := x - 1; i <= x+1; i++ { // 访问八方向的 0
            for j := y - 1; j <= y+1; j++ {
                cnt0 += dfs(i, j)
            }
        }
        return cnt0
    }
    for i, row := range land {
        for j, x := range row {
            if x == 0 { // 从没有访问过的 0 出发
                ans = append(ans, dfs(i, j))
            }
        }
    }
    sort.Ints(ans)
    return
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(mn)$，其中 $m$ 和 $n$ 分别为 $\textit{grid}$ 的行数和列数。
- 空间复杂度：$\mathcal{O}(mn)$。递归最坏需要 $\mathcal{O}(mn)$ 的栈空间（想象一个蛇形的 $0$ 连通块）。

## 题单

#### 网格图 DFS

- [200. 岛屿数量](https://leetcode.cn/problems/number-of-islands/)
- [1254. 统计封闭岛屿的数目](https://leetcode.cn/problems/number-of-closed-islands/)
- [1020. 飞地的数量](https://leetcode.cn/problems/number-of-enclaves/)
- [695. 岛屿的最大面积](https://leetcode.cn/problems/max-area-of-island/)
- [463. 岛屿的周长](https://leetcode.cn/problems/island-perimeter/)
- [130. 被围绕的区域](https://leetcode.cn/problems/surrounded-regions/)
- [417. 太平洋大西洋水流问题](https://leetcode.cn/problems/pacific-atlantic-water-flow/)
- [529. 扫雷游戏](https://leetcode.cn/problems/minesweeper/)
- [827. 最大人工岛](https://leetcode.cn/problems/making-a-large-island/)
- [1034. 边界着色](https://leetcode.cn/problems/coloring-a-border/)

#### 网格图 BFS

- [542. 01 矩阵](https://leetcode.cn/problems/01-matrix/)
- [934. 最短的桥](https://leetcode.cn/problems/shortest-bridge/)
- [994. 腐烂的橘子](https://leetcode.cn/problems/rotting-oranges/)
- [1162. 地图分析](https://leetcode.cn/problems/as-far-from-land-as-possible/)
- [2146. 价格范围内最高排名的 K 样物品](https://leetcode.cn/problems/k-highest-ranked-items-within-a-price-range/)
- [2258. 逃离火灾](https://leetcode.cn/problems/escape-the-spreading-fire/)
- [2577. 在网格图中访问一个格子的最少时间](https://leetcode.cn/problems/minimum-time-to-visit-a-cell-in-a-grid/)

#### 综合应用

- [778. 水位上升的泳池中游泳](https://leetcode.cn/problems/swim-in-rising-water/)
- [1631. 最小体力消耗路径](https://leetcode.cn/problems/path-with-minimum-effort/)
- [1263. 推箱子](https://leetcode.cn/problems/minimum-moves-to-move-a-box-to-their-target-location/)
- [LCP 75. 传送卷轴](https://leetcode.cn/problems/rdmXM7/)

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

---

欢迎关注[biIibiIi@灵茶山艾府](https://space.bilibili.com/206214)，高质量算法教学，持续输出中~
